(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     26562,        587]
NotebookOptionsPosition[     25479,        564]
NotebookOutlinePosition[     25916,        581]
CellTagsIndexPosition[     25873,        578]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData["Exit"], "Input",
 CellChangeTimes->{{3.890822537711602*^9, 3.890822538173267*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"570c1adc-8cbc-4b4a-9716-f724f36dd82e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Needs", "[", "\"\<PM`\>\"", "]"}], ";"}], "\n", 
 RowBox[{"LoadPackages", "[", "\"\<LinearAlgebraTools\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.891309539423173*^9, 3.891309545593446*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"d5a8e36a-09fa-4e5a-84a5-e9675e25cf59"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Quiet", "[", "\n", "\t", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"DownValues", "[", "MyGMRES", "]"}], ",", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"_", ":>", "x_LibraryFunction"}], "]"}], ":>", 
      RowBox[{"LibraryFunctionUnload", "[", "x", "]"}]}]}], "]"}], "\n", 
   "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "MyGMRES", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MyGMRES", "[", 
    RowBox[{"eqCount_", ",", "side0_"}], "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"MyGMRES", "[", 
     RowBox[{"eqCount", ",", "side0"}], "]"}], " ", "=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "lib", ",", "file", ",", "filename", ",", "side", ",", "class", ",", 
        "name", ",", "kernel"}], "}"}], ",", "\n", "\n", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"side0", " ", "===", " ", "Right"}], ",", " ", "\n", "\t", 
         RowBox[{
          RowBox[{"side", " ", "=", " ", "\"\<Right\>\""}], ";"}], "\n", "\t",
          ",", " ", "\n", "\t", 
         RowBox[{
          RowBox[{"side", " ", "=", " ", "\"\<Left\>\""}], ";"}]}], "\n", 
        "]"}], ";", "\n", 
       RowBox[{"name", " ", "=", " ", 
        RowBox[{"\"\<MyGMRES_\>\"", "<>", 
         RowBox[{"IntegerString", "[", "eqCount", "]"}], "<>", "\"\<_\>\"", "<>",
          "side"}]}], ";", "\n", 
       RowBox[{"filename", " ", "=", " ", "name"}], ";", "\n", "\n", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Compiling \>\"", "<>", "name", "<>", "\"\<...\>\""}], 
        "]"}], ";", "\n", 
       RowBox[{"file", " ", "=", " ", 
        RowBox[{"Export", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"$TemporaryDirectory", ",", 
             RowBox[{"filename", "<>", "\"\<.cpp\>\""}]}], "}"}], "]"}], ",", 
          "\n", 
          RowBox[{"StringJoin", "[", 
           RowBox[{
           "\"\<\n#include \\\"WolframLibrary.h\\\"\n#include \\\"MMA.h\\\"\n\
\n#define TOOLS_ENABLE_PROFILER\n#define TOOLS_DEACTIVATE_OPENMP\n\n\n#if \
defined(P)\n\t#undef P\n#endif\n\n#include \\\"Tensors.hpp\\\"\n//#include \\\
\"Sparse.hpp\\\"\n\n#include <Accelerate/Accelerate.h>\n//#include <cblas.h>\n\
//#include <lapacke.h>\n\n#include \\\"GMRES.hpp\\\"\n\n\n\nusing namespace \
Tensors;\nusing namespace Tools;\n\nusing Scal = std::complex<double>;\nusing \
Real = typename Scalar::Real<Scal>;\nusing Int  = mint;\nusing LInt = mint;\n\
\nconstexpr size_t eq_count = \>\"", "<>", 
            RowBox[{"ToString", "[", "eqCount", "]"}], "<>", 
            "\"\<;\n\nEXTERN_C DLLEXPORT int \>\"", "<>", "name", "<>", 
            "\"\<(WolframLibraryData libData, mint Argc, MArgument *Args, \
MArgument Res)\n{\n\tProfiler::Clear(\\\"\\\");\n\n\tMTensor A_ = \
MArgument_getMTensor(Args[0]);\n\tMTensor P_ = MArgument_getMTensor(Args[1]);\
\n\tMTensor b_ = MArgument_getMTensor(Args[2]);\n\n\tmreal tolerance    = \
MArgument_getReal(Args[3]);\n\tmint  max_iter     = \
MArgument_getInteger(Args[4]);\n\tmint  max_restarts = \
MArgument_getInteger(Args[5]);\n\tmint  thread_count = \
MArgument_getInteger(Args[6]);\n\n\tconst mint n    = \
libData->MTensor_getDimensions(A_)[0];\n\n\n\tMTensor x_;\n\t\
(void)libData->MTensor_new(MType_Complex, 2, \
libData->MTensor_getDimensions(b_), &x_);\n\n\tptr<Scal> A_mat = \
reinterpret_cast<Scal*>(libData->MTensor_getComplexData(A_));\n\tptr<Scal> \
P_mat = reinterpret_cast<Scal*>(libData->MTensor_getComplexData(P_));\n\t\
ptr<Scal> b     = \
reinterpret_cast<Scal*>(libData->MTensor_getComplexData(b_));\n\tmut<Scal> x  \
   = reinterpret_cast<Scal*>(libData->MTensor_getComplexData(x_));\n\n\t\
JobPointers<Int> job_ptr (n,thread_count);\n\t\n\tauto A = [&A_mat, &n]( \
ptr<Scal> x, mut<Scal> y )\n\t{\n\t\t\
Tensors::BLAS_Wrappers::gemm<Layout::RowMajor, Op::Id, Op::Id>(\n\t        n, \
eq_count, n, static_cast<Scal>(1), A_mat, n, x, eq_count, \
static_cast<Scal>(0), y, eq_count\n        );\n\t};\n\n\t/*auto A = [&A_mat, \
&n, &job_ptr, &thread_count]( ptr<Scal> x, mut<Scal> y )\n\t{\n\t\t#pragma \
omp parallel for num_threads(thread_count)\n\t\tfor( Int thread = 0; thread < \
thread_count; ++thread )\n\t\t{\n\t\t\tconst Int i_begin = job_ptr[thread  ];\
\n\t\t\tconst Int i_end   = job_ptr[thread+1];\n\n\t\t\t\
Tensors::BLAS_Wrappers::gemm<Layout::RowMajor, Op::Id, Op::Id>(\n\t\t        \
i_end-i_begin, eq_count, n, \n\t\t\t\tstatic_cast<Scal>(1),  &A_mat[i_begin * \
n],    n, \n\t\t\t                           &x[0],                  \
eq_count, \n\t\t\t\tstatic_cast<Scal>(0),  &y[i_begin * eq_count], eq_count\n\
\t\t\t);\n\t\t}\n\t};*/\n\n\tauto P = [&P_mat, &n]( ptr<Scal> x, mut<Scal> y \
)\n\t{\n\t\tTensors::BLAS_Wrappers::gemm<Layout::RowMajor, Op::Id, Op::Id>(\n\
\t        n, eq_count, n, static_cast<Scal>(1), P_mat, n, x, eq_count, \
static_cast<Scal>(0), y, eq_count\n        );\n\t};\n\n\n\t\n\t/*auto P = \
[&P_mat, &n, &job_ptr, &thread_count]( ptr<Scal> x, mut<Scal> y )\n\t{\n\t\t\
#pragma omp parallel for num_threads(thread_count)\n\t\tfor( Int thread = 0; \
thread < thread_count; ++thread )\n\t\t{\n\t\t\tconst Int i_begin = \
job_ptr[thread  ];\n\t\t\tconst Int i_end   = job_ptr[thread+1];\n\n\t\t\t\
Tensors::BLAS_Wrappers::gemm<Layout::RowMajor, Op::Id, Op::Id>(\n\t\t        \
i_end-i_begin, eq_count, n, \n\t\t\t\tstatic_cast<Scal>(1), &P_mat[i_begin * \
n],    n, \n\t\t\t\t\t\t\t\t      &x[0],                  eq_count, \n\t\t\t\t\
static_cast<Scal>(0), &y[i_begin * eq_count], eq_count\n\t\t\t);\n\t\t}\n\t\
};*/\n\n\tGMRES<eq_count,Scal,Int,Side::\>\"", "<>", "side", "<>", 
            "\"\<> gmres ( n, max_iter, thread_count );\n\t\n\t\
tic(\\\"A\\\");\n\t\tA( b, x );\n\ttoc(\\\"A\\\");\n\n\ttic(\\\"P\\\");\n\t\t\
P( b, x );\n\ttoc(\\\"P\\\");\n\n\tcopy_buffer( b, x, n * eq_count );\n\n\t\
bool succeeded = gmres(A, P, b, eq_count, x, eq_count, tolerance, \
max_restarts );\n\n\tdump(succeeded);\n\n\n\tdump(gmres.RestartCount());\n\t\
dump(gmres.IterationCount());\n\t\n\tMArgument_setMTensor(Res, x_);\n\t\n\t\
return LIBRARY_NO_ERROR;\n}\>\""}], "]"}], ",", "\n", "\"\<Text\>\""}], 
         "]"}]}], ";", "\n", "\t\t", "\n", "\t", 
       RowBox[{"lib", "=", 
        RowBox[{"CreateLibrary", "[", 
         RowBox[{
          RowBox[{"{", "file", "}"}], ",", "filename", ",", "\n", 
          RowBox[{
          "\"\<TargetDirectory\>\"", "->", " ", "$TemporaryDirectory"}], ",", 
          "\n", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"\"\<ShellCommandFunction\>\"", "\[Rule]", "Print"}], 
            ","}], "*)"}], "\n", 
          RowBox[{"\"\<ShellOutputFunction\>\"", "->", "Print"}], ",", "\n", 
          RowBox[{"Get", "[", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"SourcePath", "[", 
               RowBox[{
                RowBox[{"Packages", "[", "$PM", "]"}], "[", 
                "\"\<LinearAlgebraTools\>\"", "]"}], "]"}], ",", 
              "\"\<LibrarySources\>\"", ",", "\"\<BuildSettings.m\>\""}], 
             "}"}], "]"}], "]"}]}], "\n", "]"}]}], ";", "\n", 
       RowBox[{"LibraryFunctionLoad", "[", 
        RowBox[{"lib", ",", "name", ",", 
         RowBox[{"{", "\n", "\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Complex", ",", "2", ",", "\"\<Constant\>\""}], "}"}], 
           ",", "\n", "\t", 
           RowBox[{"{", 
            RowBox[{"Complex", ",", "2", ",", "\"\<Constant\>\""}], "}"}], 
           ",", "\n", "\t", 
           RowBox[{"{", 
            RowBox[{"Complex", ",", "2", ",", "\"\<Constant\>\""}], "}"}], 
           ",", "\n", "\t", "Real", ",", "\n", "\t", "Integer", ",", "\n", 
           "\t", "Integer", ",", "\n", "\t", "Integer"}], "\n", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Complex", ",", "2"}], "}"}]}], "]"}]}]}], "\n", "]"}]}]}], 
  ";"}]}], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.891157755577496*^9, 3.891157814714991*^9}, {
   3.89115791679935*^9, 3.891158043415784*^9}, {3.891158098282309*^9, 
   3.891158282462762*^9}, {3.8911583218100767`*^9, 3.8911585016192837`*^9}, {
   3.891158534237715*^9, 3.891158657202877*^9}, 3.891158760909277*^9, {
   3.8911589225080976`*^9, 3.891158943005481*^9}, {3.891159049194849*^9, 
   3.8911590873884478`*^9}, {3.891159739503723*^9, 3.8911598176910267`*^9}, {
   3.8911598534259443`*^9, 3.89115987207298*^9}, {3.8911600815033503`*^9, 
   3.8911600969481897`*^9}, {3.89116042588962*^9, 3.8911604263224382`*^9}, {
   3.891160516587863*^9, 3.8911605442133713`*^9}, {3.8911606987167263`*^9, 
   3.891160714969966*^9}, 3.8911609238134203`*^9, 3.891161478283824*^9, {
   3.891167651759027*^9, 3.891167657841936*^9}, {3.891168027729786*^9, 
   3.8911680278946743`*^9}, {3.8911680716824713`*^9, 3.891168141022768*^9}, 
   3.89116975722046*^9, {3.891169881346511*^9, 3.8911698836751013`*^9}, {
   3.891307298962401*^9, 3.891307534243927*^9}, 3.891307565861861*^9, {
   3.8913077811926517`*^9, 3.8913077821300793`*^9}, {3.891309550887673*^9, 
   3.89130955150028*^9}, {3.891312415151361*^9, 3.891312496856299*^9}, {
   3.891312785556138*^9, 3.8913128326647587`*^9}, {3.8913129125498238`*^9, 
   3.89131297066431*^9}, 3.891313061592453*^9, {3.891313397339302*^9, 
   3.891313402385507*^9}, 3.8913134501026506`*^9, {3.8913137544403563`*^9, 
   3.891313759179385*^9}, {3.891313966294221*^9, 3.891314164176996*^9}, {
   3.8913142080580873`*^9, 3.89131421336481*^9}, {3.8913142451915607`*^9, 
   3.891314247362566*^9}, {3.891314335743222*^9, 3.8913143361698837`*^9}, {
   3.89131437534391*^9, 3.89131446591777*^9}, {3.891314506126624*^9, 
   3.891314518842038*^9}, {3.891315017005134*^9, 3.891315018834589*^9}, {
   3.8913154196614227`*^9, 3.891315512117504*^9}, {3.891315557830421*^9, 
   3.891315594484974*^9}, {3.891315629840473*^9, 3.8913156466468763`*^9}, {
   3.891315694119643*^9, 3.891315716029765*^9}, {3.891315939681695*^9, 
   3.891315949697144*^9}, {3.891392464075482*^9, 3.8913926059337587`*^9}, {
   3.891392654718155*^9, 3.8913926716817303`*^9}, {3.8913927174288197`*^9, 
   3.891392785481864*^9}, {3.891392902343899*^9, 3.891392914760895*^9}, {
   3.891394962327855*^9, 3.8913949812377768`*^9}, {3.891414741356435*^9, 
   3.891414744934174*^9}, {3.891414804764731*^9, 3.891414805046857*^9}, 
   3.891414950521419*^9, {3.8914150144161587`*^9, 3.891415014570161*^9}, {
   3.89141556416428*^9, 3.8914155748028727`*^9}, {3.891415666264842*^9, 
   3.891415702096983*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"71515625-4c33-4285-8327-afc3ba511c37"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MyGMRES", "[", 
   RowBox[{"1", ",", "Left"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.891307392818903*^9, 3.891307393682543*^9}, 
   3.891308968088756*^9, 3.891310199418189*^9, {3.891313510634489*^9, 
   3.891313511172106*^9}, {3.891388284082789*^9, 3.891388284567567*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"44b12e8d-fa02-4d52-825b-f8e6f0318a97"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"eqCount", "=", "16"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TOL", "=", 
   RowBox[{"1.", " ", 
    RowBox[{"10", "^", 
     RowBox[{"-", "12"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maxiter", "=", "60"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maxrestarts", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"n", "=", "6000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"side", "=", "Left"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"SeedRandom", "[", "1234", "]"}], ";"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"A", "=", 
    RowBox[{"RandomComplex", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "-", "I"}], ",", 
        RowBox[{"1", "+", "I"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "n"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"IdentityMatrix", "[", 
      RowBox[{"n", ",", 
       RowBox[{"WorkingPrecision", "->", "MachinePrecision"}]}], "]"}]}], 
    ";"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"Inverse", "[", 
    RowBox[{"A", "+", 
     RowBox[{"0.001", 
      RowBox[{"RandomComplex", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "1"}], "-", "I"}], ",", 
          RowBox[{"1", "+", "I"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "n"}], "}"}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"RandomComplex", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "1"}], "-", "I"}], ",", 
       RowBox[{"1", "+", "I"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "eqCount"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"xTrue", "=", 
    RowBox[{"LinearSolve", "[", 
     RowBox[{"A", ",", "b"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "errors", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"error", "[", "x_", "]"}], ":=", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"xTrue", "=", 
         RowBox[{"xTrue", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\[Delta]x", "=", 
         RowBox[{"x", "-", 
          RowBox[{"xTrue", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}]}], 
       "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{"Sqrt", "[", 
        RowBox[{"Abs", "[", 
         RowBox[{"Dot", "[", 
          RowBox[{
           RowBox[{"A", ".", "\[Delta]x"}], ",", 
           RowBox[{"Conjugate", "[", "\[Delta]x", "]"}]}], "]"}], "]"}], 
        "]"}], "/", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"Abs", "[", 
         RowBox[{"Dot", "[", 
          RowBox[{
           RowBox[{"A", ".", "xTrue"}], ",", 
           RowBox[{"Conjugate", "[", "xTrue", "]"}]}], "]"}], "]"}], 
        "]"}]}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"result", ",", "X"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8911604581515017`*^9, 3.891160488216844*^9}, {
   3.891160550649046*^9, 3.8911605516949377`*^9}, 3.8911608379360857`*^9, {
   3.8911608826668453`*^9, 3.891160888018506*^9}, {3.891168668748642*^9, 
   3.891168669112735*^9}, {3.891169139304915*^9, 3.891169143672477*^9}, 
   3.891308364588695*^9, {3.891309566184847*^9, 3.891309566352622*^9}, 
   3.891310558895694*^9, {3.8913118867055492`*^9, 3.8913119128436747`*^9}, {
   3.8913121683168993`*^9, 3.89131216857032*^9}, {3.891313016098476*^9, 
   3.8913130162176228`*^9}, {3.89131307986117*^9, 3.891313103485127*^9}, {
   3.891313277258233*^9, 3.8913132774559317`*^9}, {3.891313459978895*^9, 
   3.8913134691014223`*^9}, {3.891313732560405*^9, 3.891313734603549*^9}, {
   3.891313807134067*^9, 3.891313842784917*^9}, 3.8913139210491037`*^9, 
   3.891314605156621*^9, {3.8913151096940727`*^9, 3.891315109895938*^9}, {
   3.891315544143354*^9, 3.891315549720497*^9}, {3.8913160054891577`*^9, 
   3.891316007950244*^9}, 3.891316094525199*^9, {3.8913161461318483`*^9, 
   3.891316150673402*^9}, {3.891316218686145*^9, 3.891316250334449*^9}, 
   3.891316305916336*^9, {3.8913163919588213`*^9, 3.8913164099706497`*^9}, {
   3.89131646045754*^9, 3.891316460558834*^9}, 3.891316546919273*^9, {
   3.891316766399876*^9, 3.891316771061812*^9}, {3.891316905198997*^9, 
   3.891316905645731*^9}, {3.891317531810136*^9, 3.891317531951436*^9}, {
   3.891361133131443*^9, 3.8913611334328003`*^9}, {3.8913612859519978`*^9, 
   3.891361288516377*^9}, {3.891387770519973*^9, 3.891387871464487*^9}, {
   3.891387912278748*^9, 3.891387924773596*^9}, {3.891387964332816*^9, 
   3.89138796813244*^9}, {3.891388273842572*^9, 3.891388276503467*^9}, {
   3.891388325859178*^9, 3.891388350839737*^9}, {3.8913886643570004`*^9, 
   3.891388664977305*^9}, {3.891388695738533*^9, 3.8913886988441887`*^9}, {
   3.8913889094588947`*^9, 3.8913889125765667`*^9}, {3.891389871491632*^9, 
   3.891389883735515*^9}, {3.891389919520316*^9, 3.891390007294787*^9}, 
   3.891390202133731*^9, {3.89139041323*^9, 3.891390416684778*^9}, {
   3.891390453362282*^9, 3.8913904637370157`*^9}, 3.891390604946763*^9, {
   3.891390665695503*^9, 3.89139066613982*^9}, {3.891392419548581*^9, 
   3.8913924575550337`*^9}, {3.8913946194253817`*^9, 
   3.8913946198904963`*^9}, {3.8913948019896812`*^9, 3.891394802444174*^9}, {
   3.8913948477039013`*^9, 3.891394848244706*^9}, {3.891395449237032*^9, 
   3.8913954504957*^9}, {3.891395531807405*^9, 3.891395532338971*^9}, {
   3.891395593671421*^9, 3.891395595414708*^9}, {3.891396404120023*^9, 
   3.891396404405506*^9}, 3.8913964529009333`*^9, {3.891396792229488*^9, 
   3.891396792801292*^9}, {3.891487430031288*^9, 3.891487430573586*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"4072c942-a7c6-4d15-b40e-b390c7a84b8e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"result", "[", "side", "]"}], "=", 
    RowBox[{"GMRES", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"A", ".", "#"}], "&"}], ",", 
      RowBox[{"b", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<MaxIterations\>\"", "->", "maxiter"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Tolerance\>\"", "->", "TOL"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"\"\<GramSchmidtIterations\>\"", "->", "2"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<PreconditionerSide\>\"", "->", "side"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Preconditioner\>\"", "->", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P", ".", "#"}], "&"}], ")"}]}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"\"\<StartingVector\>\"", "->", 
       RowBox[{"b", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "//", "AbsoluteTiming"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"X", "[", "side", "]"}], "=", 
    RowBox[{
     RowBox[{"result", "[", "side", "]"}], "[", "\"\<Solution\>\"", "]"}]}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"Norm", "[", 
      RowBox[{
       RowBox[{"A", ".", "xLeft"}], "-", 
       RowBox[{"b", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}], "/", 
     RowBox[{"Norm", "[", 
      RowBox[{"b", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Norm", "[", 
      RowBox[{"P", ".", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"A", ".", "xLeft"}], "-", 
         RowBox[{"b", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ")"}]}], "]"}], "/", 
     RowBox[{"Norm", "[", 
      RowBox[{"P", ".", 
       RowBox[{"b", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"error", "[", 
  RowBox[{"X", "[", "side", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.891309583652156*^9, 3.891309592719846*^9}, {
   3.891310698828911*^9, 3.891310704784009*^9}, {3.8913133261011133`*^9, 
   3.891313326707841*^9}, {3.891361591938819*^9, 3.891361592560123*^9}, 
   3.89138776819827*^9, {3.8913878018837233`*^9, 3.891387805507999*^9}, {
   3.891387886443226*^9, 3.891387900268684*^9}, {3.891387992479692*^9, 
   3.891388015549697*^9}, {3.891388303035725*^9, 3.891388388076111*^9}, {
   3.891388646474869*^9, 3.891388649846105*^9}, 3.891389890381147*^9, 
   3.891389970769787*^9, 3.8913952610081778`*^9, {3.891395405581114*^9, 
   3.891395425157967*^9}, {3.891395466694409*^9, 3.891395466797759*^9}, {
   3.891395501122559*^9, 3.891395508574808*^9}, {3.891396015567726*^9, 
   3.891396027125121*^9}, {3.8913963770519342`*^9, 3.891396386931877*^9}, {
   3.891396463233439*^9, 3.891396515531868*^9}, {3.891413701086135*^9, 
   3.891413702216818*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"759bfa6a-edff-42c1-97e1-f7173a4ef7ab"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{"MyGMRES", "[", 
      RowBox[{"eqCount", ",", "side"}], "]"}], "[", 
     RowBox[{
     "A", ",", "P", ",", "b", ",", "TOL", ",", "maxiter", ",", "maxrestarts", 
      ",", "1"}], "]"}]}], ";"}], "//", 
  "AbsoluteTiming"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<PreconditionerResidual\>\"", "->", 
  RowBox[{"Max", "@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Norm", "[", 
       RowBox[{"P", ".", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"A", ".", 
           RowBox[{"x", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "i"}], "]"}], "]"}]}], "-", 
          RowBox[{"b", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "i"}], "]"}], "]"}]}], ")"}]}], "]"}], "/", 
      RowBox[{"Norm", "[", 
       RowBox[{"P", ".", 
        RowBox[{"b", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{
        RowBox[{"Dimensions", "[", "b", "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Residual\>\"", "->", 
  RowBox[{"Max", "@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Norm", "[", 
       RowBox[{
        RowBox[{"A", ".", 
         RowBox[{"x", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "i"}], "]"}], "]"}]}], "-", 
        RowBox[{"b", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}]}], "]"}], "/", 
      RowBox[{"Norm", "[", 
       RowBox[{"b", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "i"}], "]"}], "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{
        RowBox[{"Dimensions", "[", "b", "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\"\<Error\>\"", "->", 
   RowBox[{"error", "[", 
    RowBox[{"x", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"p", "=", 
   RowBox[{"ImportProfile", "[", "\"\<Tools_Profile.tsv\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Sunburst", "[", "p", "]"}]}], "Input",
 CellChangeTimes->{{3.891313743722921*^9, 3.891313744144451*^9}, 
   3.891314268547102*^9, {3.8913143551621237`*^9, 3.891314355531857*^9}, {
   3.891314494565934*^9, 3.891314494696485*^9}, {3.891314536181635*^9, 
   3.891314554954946*^9}, {3.8913155315806437`*^9, 3.891315540411254*^9}, {
   3.8913160017299547`*^9, 3.891316010377181*^9}, 3.8913161437539*^9, {
   3.8913162660477543`*^9, 3.8913163408218927`*^9}, {3.891316862925334*^9, 
   3.891316893482059*^9}, {3.891317599682596*^9, 3.891317699021639*^9}, 
   3.891388050118319*^9, {3.891388118498681*^9, 3.8913881544557667`*^9}, {
   3.8913884088516083`*^9, 3.891388409411728*^9}, {3.891390242669631*^9, 
   3.8913902628894167`*^9}, {3.891390439890482*^9, 3.891390446312546*^9}, {
   3.891390493944875*^9, 3.891390505453579*^9}, 3.891390543157003*^9, 
   3.891390634336759*^9, {3.8913929359807863`*^9, 3.89139294669374*^9}, {
   3.8913945863623238`*^9, 3.891394609181958*^9}, {3.891394871362129*^9, 
   3.891394895808104*^9}, {3.891396962807119*^9, 3.891396968389902*^9}, {
   3.891414786389975*^9, 3.891414794026558*^9}, 3.8914148446880608`*^9},
 CellLabel->"In[53]:=",ExpressionUUID->"d0b84b14-ba2f-4f05-8757-9d7a24dce213"],

Cell[BoxData[
 RowBox[{"EigentimeTable", "[", 
  RowBox[{"p", ",", "0."}], "]"}]], "Input",
 CellChangeTimes->{{3.8913902725180073`*^9, 3.891390278261156*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"41b6b765-bd7c-4d2e-8970-bf5ad569482d"]
},
WindowSize->{1496, 905},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"03ee3a03-02d3-4de4-b112-3372b20823cf"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 174, 2, 41, "Input",ExpressionUUID->"570c1adc-8cbc-4b4a-9716-f724f36dd82e"],
Cell[735, 24, 306, 5, 67, "Input",ExpressionUUID->"d5a8e36a-09fa-4e5a-84a5-e9675e25cf59"],
Cell[1044, 31, 10642, 189, 3867, "Code",ExpressionUUID->"71515625-4c33-4285-8327-afc3ba511c37",
 InitializationCell->False],
Cell[11689, 222, 394, 7, 41, "Input",ExpressionUUID->"44b12e8d-fa02-4d52-825b-f8e6f0318a97"],
Cell[12086, 231, 6336, 151, 542, "Input",ExpressionUUID->"4072c942-a7c6-4d15-b40e-b390c7a84b8e"],
Cell[18425, 384, 3238, 81, 317, "Input",ExpressionUUID->"759bfa6a-edff-42c1-97e1-f7173a4ef7ab"],
Cell[21666, 467, 3568, 89, 217, "Input",ExpressionUUID->"d0b84b14-ba2f-4f05-8757-9d7a24dce213"],
Cell[25237, 558, 238, 4, 41, "Input",ExpressionUUID->"41b6b765-bd7c-4d2e-8970-bf5ad569482d"]
}
]
*)

